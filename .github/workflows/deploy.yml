name: 部署到Netlify

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
  REACT_APP_SUPABASE_URL: ${{ secrets.REACT_APP_SUPABASE_URL }}
  REACT_APP_SUPABASE_ANON_KEY: ${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}

jobs:
  # 代码质量检查
  lint-and-test:
    name: 代码检查和测试
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          client/package-lock.json
          server/package-lock.json
    
    - name: 安装前端依赖
      run: |
        cd client
        npm ci
    
    - name: 安装后端依赖
      run: |
        cd server
        npm ci
    
    - name: 前端代码检查
      run: |
        cd client
        npm run lint
    
    - name: 前端类型检查
      run: |
        cd client
        npm run type-check
      continue-on-error: true
    
    - name: 前端测试
      run: |
        cd client
        npm run test -- --coverage --watchAll=false
    
    - name: 后端测试
      run: |
        cd server
        npm run test
      env:
        NODE_ENV: test
        DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
    
    - name: 上传测试覆盖率
      uses: codecov/codecov-action@v3
      with:
        directory: ./client/coverage
        flags: frontend
        name: frontend-coverage
    
    - name: 上传后端覆盖率
      uses: codecov/codecov-action@v3
      with:
        directory: ./server/coverage
        flags: backend
        name: backend-coverage

  # 构建前端应用
  build:
    name: 构建前端应用
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: 安装依赖
      run: |
        cd client
        npm ci
    
    - name: 构建应用
      run: |
        cd client
        npm run build
      env:
        GENERATE_SOURCEMAP: false
        REACT_APP_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    
    - name: 上传构建产物
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: client/build/
        retention-days: 7

  # 安全扫描
  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 运行Snyk安全扫描
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        command: test
      continue-on-error: true
    
    - name: 运行npm audit
      run: |
        cd client
        npm audit --audit-level=moderate
        cd ../server
        npm audit --audit-level=moderate
      continue-on-error: true

  # 部署到Netlify
  deploy:
    name: 部署到Netlify
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.event_name == 'push'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 下载构建产物
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: client/build/
    
    - name: 部署到Netlify
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: './client/build'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "部署提交 ${{ github.sha }}"
        enable-pull-request-comment: true
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
    
    - name: 运行Lighthouse CI
      uses: treosh/lighthouse-ci-action@v9
      with:
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # 部署后端到Heroku
  deploy-backend:
    name: 部署后端到Heroku
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 部署到Heroku
      uses: akhileshns/heroku-deploy@v3.12.12
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: "ai-workplace-api"
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        appdir: "server"
        procfile: "web: node index.js"
        
    - name: 运行数据库迁移
      run: |
        heroku run npm run migrate --app ai-workplace-api
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

  # 通知部署结果
  notify:
    name: 通知部署结果
    runs-on: ubuntu-latest
    needs: [deploy, deploy-backend]
    if: always()
    
    steps:
    - name: 发送成功通知
      if: needs.deploy.result == 'success' && needs.deploy-backend.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '🎉 AI职场精灵部署成功！'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
    
    - name: 发送失败通知
      if: needs.deploy.result == 'failure' || needs.deploy-backend.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ AI职场精灵部署失败，请检查日志'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # 性能监控
  performance-monitoring:
    name: 性能监控
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 等待部署完成
      run: sleep 60
      
    - name: 运行性能测试
      run: |
        npx lighthouse https://ai-workplace-genie.netlify.app \
          --chrome-flags="--headless --no-sandbox" \
          --output=json \
          --output-path=./lighthouse-report.json
      
    - name: 分析性能报告
      run: |
        node -e "
          const report = require('./lighthouse-report.json');
          const scores = report.lhr.categories;
          console.log('性能评分:');
          console.log('Performance:', scores.performance.score * 100);
          console.log('Accessibility:', scores.accessibility.score * 100);
          console.log('Best Practices:', scores['best-practices'].score * 100);
          console.log('SEO:', scores.seo.score * 100);
          
          if (scores.performance.score < 0.8) {
            console.error('⚠️ 性能评分低于80分，需要优化');
            process.exit(1);
          }
        "
      
    - name: 上传性能报告
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-report
        path: lighthouse-report.json

  # 数据库备份（生产环境）
  backup-database:
    name: 数据库备份
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 创建数据库备份
      run: |
        pg_dump ${{ secrets.DATABASE_URL }} > backup-$(date +%Y%m%d-%H%M%S).sql
      env:
        PGPASSWORD: ${{ secrets.DB_PASSWORD }}
    
    - name: 上传备份到云存储
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: 同步备份文件
      run: |
        aws s3 cp backup-*.sql s3://ai-workplace-backups/database/
        
  # 清理旧的构建产物
  cleanup:
    name: 清理资源
    runs-on: ubuntu-latest
    needs: [deploy, deploy-backend]
    if: always()
    
    steps:
    - name: 清理旧的GitHub Artifacts
      uses: actions/github-script@v6
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          const oldArtifacts = artifacts.data.artifacts.filter(
            artifact => artifact.created_at < new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
          );
          
          for (const artifact of oldArtifacts) {
            await github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id,
            });
          }